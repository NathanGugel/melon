(window.webpackJsonp=window.webpackJsonp||[]).push([[23],{100:function(e,n,a){"use strict";a.d(n,"a",(function(){return p})),a.d(n,"b",(function(){return m}));var r=a(0),t=a.n(r);function i(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function o(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,r)}return a}function c(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?o(Object(a),!0).forEach((function(n){i(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):o(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,r,t=function(e,n){if(null==e)return{};var a,r,t={},i=Object.keys(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||(t[a]=e[a]);return t}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)a=i[r],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(t[a]=e[a])}return t}var b=t.a.createContext({}),s=function(e){var n=t.a.useContext(b),a=n;return e&&(a="function"==typeof e?e(n):c(c({},n),e)),a},p=function(e){var n=s(e.components);return t.a.createElement(b.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.a.createElement(t.a.Fragment,{},n)}},d=t.a.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,b=l(e,["components","mdxType","originalType","parentName"]),p=s(a),d=r,m=p["".concat(o,".").concat(d)]||p[d]||u[d]||i;return a?t.a.createElement(m,c(c({ref:n},b),{},{components:a})):t.a.createElement(m,c({ref:n},b))}));function m(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,o=new Array(i);o[0]=d;var c={};for(var l in n)hasOwnProperty.call(n,l)&&(c[l]=n[l]);c.originalType=e,c.mdxType="string"==typeof e?e:r,o[1]=c;for(var b=2;b<i;b++)o[b]=a[b];return t.a.createElement.apply(null,o)}return t.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},79:function(e,n,a){"use strict";a.r(n),a.d(n,"frontMatter",(function(){return o})),a.d(n,"metadata",(function(){return c})),a.d(n,"rightToc",(function(){return l})),a.d(n,"default",(function(){return s}));var r=a(2),t=a(6),i=(a(0),a(100)),o={id:"array",title:"Array",sidebar_label:"Array",slug:"/types/array"},c={unversionedId:"array",id:"array",isDocsHomePage:!1,title:"Array",description:"An Array is an ordered collection of values.",source:"@site/docs/array.md",slug:"/types/array",permalink:"/melon/docs/types/array",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/array.md",version:"current",sidebar_label:"Array",sidebar:"someSidebar",previous:{title:"String",permalink:"/melon/docs/types/string"},next:{title:"Object",permalink:"/melon/docs/types/object"}},l=[{value:"Creating arrays",id:"creating-arrays",children:[]},{value:"Reading values",id:"reading-values",children:[]},{value:"Reading size",id:"reading-size",children:[]},{value:"Adding values",id:"adding-values",children:[]},{value:"Writing values",id:"writing-values",children:[]},{value:"Iterating",id:"iterating",children:[]},{value:"Array slicing",id:"array-slicing",children:[]},{value:"Concatenation",id:"concatenation",children:[]},{value:"Further array manipulation",id:"further-array-manipulation",children:[]}],b={rightToc:l};function s(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},b,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"An ",Object(i.b)("inlineCode",{parentName:"p"},"Array")," is an ordered collection of values."),Object(i.b)("h2",{id:"creating-arrays"},"Creating arrays"),Object(i.b)("p",null,"An array can be created by using brackets:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let myArr = []; // An empty array\n")),Object(i.b)("p",null,"You can also initialize an array with values:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myArr = [ 2, 5 + 5, "a string", true, null ];\n')),Object(i.b)("h2",{id:"reading-values"},"Reading values"),Object(i.b)("p",null,"You can access an ",Object(i.b)("inlineCode",{parentName:"p"},"Array"),"'s index by using the array access operator ",Object(i.b)("inlineCode",{parentName:"p"},"[]"),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myArr = [ 1, "a string", 2 ];\n\nio.print(myArr[0]); // 1\nio.print(myArr[1]); // a string\nio.print(myArr[2]); // 2\n\n')),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"If you access an index that's past the end of the array an error will be triggered.\nThis is somewhat different from popular dynamic languages, but is done intentionally to avoid undetected bugs. Melon can do this because arrays are a completely different type from ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," and share nothing with it, while other popular programming languages use the equivalent of ",Object(i.b)("inlineCode",{parentName:"p"},"Object")," for arrays or an extension thereof."))),Object(i.b)("h2",{id:"reading-size"},"Reading size"),Object(i.b)("p",null,"You can use the size operator ",Object(i.b)("inlineCode",{parentName:"p"},"#")," to retrieve an ",Object(i.b)("inlineCode",{parentName:"p"},"Array"),"'s size:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"io.print(#[]); // 0\nio.print(#[1, 2, 3]); // 3\n")),Object(i.b)("h2",{id:"adding-values"},"Adding values"),Object(i.b)("p",null,"You can add values to an existing array by not passing an index to the array access operator ",Object(i.b)("inlineCode",{parentName:"p"},"[]")," as follows:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let myArr = [];\nmyArr[] = 1;\nmyArr[] = 2;\nio.print(#myArr); // 2\n")),Object(i.b)("h2",{id:"writing-values"},"Writing values"),Object(i.b)("p",null,"Writing values to existing array indices works as you would expect:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myArr = [ null ];\nio.print(myArr[0]); // null\n\nmyArr[0] = "it works";\nio.print(myArr[0]); // it works\n')),Object(i.b)("h2",{id:"iterating"},"Iterating"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Arrays")," provide a native ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/iterator"}),Object(i.b)("inlineCode",{parentName:"a"},"Iterator"))," that can be used to iterate over them:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let fruits = [ "banana", "mango", "melon" ];\n\nfor (let fruit in fruits) {\n    io.print(fruit);\n}\n')),Object(i.b)("p",null,"Outputs:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"banana\nmango\nmelon\n")),Object(i.b)("p",null,"You can also iterate over arrays using ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/range"}),Object(i.b)("inlineCode",{parentName:"a"},"Range"))," values, for example because the index of the item is needed:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let fruits = [ "banana", "mango", "melon" ];\n\nfor (let i in 0..#fruits) {\n    io.print(i, fruits[i]);\n}\n')),Object(i.b)("p",null,"Outputs:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{}),"0 banana\n1 mango\n2 melon\n")),Object(i.b)("h2",{id:"array-slicing"},"Array slicing"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"Array")," values can be sliced returning a new array composed of only a part of the original.\nThe slicing operator ",Object(i.b)("inlineCode",{parentName:"p"},"[start:end]")," can be used for slicing.\nThe ",Object(i.b)("inlineCode",{parentName:"p"},"start")," index is inclusive and the ",Object(i.b)("inlineCode",{parentName:"p"},"end")," index is exclusive.\nBoth the ",Object(i.b)("inlineCode",{parentName:"p"},"start")," and ",Object(i.b)("inlineCode",{parentName:"p"},"end")," index are optional and the ",Object(i.b)("inlineCode",{parentName:"p"},"end")," index can also be a negative index expressing an index starting from the end of the array."),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let myArrWhole = [1, 2, 3, 4];\nlet myArrA = myArrWhole[1:]; // [2, 3, 4];\nlet myArrB = myArrWhole[:2]; // [1, 2];\nlet myArrC = myArrWhole[1:-1]; // [2, 3];\n")),Object(i.b)("p",null,"You can use the slicing operator to clone an ",Object(i.b)("inlineCode",{parentName:"p"},"Array")," value:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"let myArrWhole = [1, 2, 3, 4];\nlet myArrCopy = myArrWhole[:];\n\nio.print(#myArrWhole == #myArrCopy); // true\nio.print(myArrCopy == myArrWhole); // false\n")),Object(i.b)("h2",{id:"concatenation"},"Concatenation"),Object(i.b)("p",null,"You can combine two arrays in a new array by using the concatenation operator ",Object(i.b)("inlineCode",{parentName:"p"},".."),":"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myArrA = [ "banana", "mango" ];\nlet myArrB = [ "melon" ];\n\nlet myArrC = myArrA .. myArrB; // banana, mango, melon\nlet myArrD = myArrB .. myArrA; // melon, mango, banana\n')),Object(i.b)("h2",{id:"further-array-manipulation"},"Further array manipulation"),Object(i.b)("p",null,"There are other ways to manipulate ",Object(i.b)("inlineCode",{parentName:"p"},"Array")," values, they can be found in the ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/modules/array_module"}),Object(i.b)("inlineCode",{parentName:"a"},"array"))," core module."))}s.isMDXComponent=!0}}]);