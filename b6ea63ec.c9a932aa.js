(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return m}));var r=n(0),a=n.n(r);function c(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){c(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},c=Object.keys(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var c=Object.getOwnPropertySymbols(e);for(r=0;r<c.length;r++)n=c[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var u=a.a.createContext({}),b=function(e){var t=a.a.useContext(u),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},d=function(e){var t=b(e.components);return a.a.createElement(u.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},p=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,c=e.originalType,o=e.parentName,u=i(e,["components","mdxType","originalType","parentName"]),d=b(n),p=r,m=d["".concat(o,".").concat(p)]||d[p]||s[p]||c;return n?a.a.createElement(m,l(l({ref:t},u),{},{components:n})):a.a.createElement(m,l({ref:t},u))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var c=n.length,o=new Array(c);o[0]=p;var l={};for(var i in t)hasOwnProperty.call(t,i)&&(l[i]=t[i]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var u=2;u<c;u++)o[u]=n[u];return a.a.createElement.apply(null,o)}return a.a.createElement.apply(null,n)}p.displayName="MDXCreateElement"},83:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return o})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return b}));var r=n(2),a=n(6),c=(n(0),n(100)),o={id:"debug_module",title:"debug",sidebar_label:"debug",slug:"/modules/debug_module"},l={unversionedId:"debug_module",id:"debug_module",isDocsHomePage:!1,title:"debug",description:"This module groups some debugging utility functions together. It can be",source:"@site/docs/debug_module.md",slug:"/modules/debug_module",permalink:"/melon/docs/modules/debug_module",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/debug_module.md",version:"current",sidebar_label:"debug",sidebar:"someSidebar",previous:{title:"compiler",permalink:"/melon/docs/modules/compiler_module"},next:{title:"fs",permalink:"/melon/docs/modules/fs_module"}},i=[{value:"Functions",id:"functions",children:[{value:"printStack()",id:"printstack",children:[]},{value:"printCallstack()",id:"printcallstack",children:[]},{value:"error(message)",id:"errormessage",children:[]},{value:"getCallstack()",id:"getcallstack",children:[]},{value:"dump(val)",id:"dumpval",children:[]}]}],u={rightToc:i};function b(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(c.b)("wrapper",Object(r.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(c.b)("p",null,"This module groups some debugging utility functions together. It can be\nused to inspect the VM or build more sophisticated debugging\nfunctionalities on top of it."),Object(c.b)("h2",{id:"functions"},"Functions"),Object(c.b)("h3",{id:"printstack"},"printStack()"),Object(c.b)("p",null,"Prints the current stack to ",Object(c.b)("inlineCode",{parentName:"p"},"stdout")),Object(c.b)("h3",{id:"printcallstack"},"printCallstack()"),Object(c.b)("p",null,"Prints the current call stack to ",Object(c.b)("inlineCode",{parentName:"p"},"stdout")),Object(c.b)("h3",{id:"errormessage"},"error(message)"),Object(c.b)("p",null,"Prints an error and aborts the program's execution. "),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Argument"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"td"},"message")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"The error message")))),Object(c.b)("h3",{id:"getcallstack"},"getCallstack()"),Object(c.b)("p",null,"This function returns an array of the function objects which are currently in the call stack. "),Object(c.b)("p",null,Object(c.b)("strong",{parentName:"p"},"Returns:")," An array of functions, the top of the stack is at index ",Object(c.b)("inlineCode",{parentName:"p"},"0")),Object(c.b)("h3",{id:"dumpval"},"dump(val)"),Object(c.b)("p",null,"Dumps a value to ",Object(c.b)("inlineCode",{parentName:"p"},"stdout")," using the internal dump function "),Object(c.b)("table",null,Object(c.b)("thead",{parentName:"table"},Object(c.b)("tr",{parentName:"thead"},Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Argument"),Object(c.b)("th",Object(r.a)({parentName:"tr"},{align:null}),"Description"))),Object(c.b)("tbody",{parentName:"table"},Object(c.b)("tr",{parentName:"tbody"},Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),Object(c.b)("strong",{parentName:"td"},"val")),Object(c.b)("td",Object(r.a)({parentName:"tr"},{align:null}),"The value to dump")))))}b.isMDXComponent=!0}}]);