(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return j}));var a=n(0),r=n.n(a);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},O={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,b=e.originalType,l=e.parentName,o=c(e,["components","mdxType","originalType","parentName"]),d=p(n),u=a,j=d["".concat(l,".").concat(u)]||d[u]||O[u]||b;return n?r.a.createElement(j,i(i({ref:t},o),{},{components:n})):r.a.createElement(j,i({ref:t},o))}));function j(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,l=new Array(b);l[0]=u;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i.mdxType="string"==typeof e?e:a,l[1]=i;for(var o=2;o<b;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},77:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return i})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),b=(n(0),n(100)),l={id:"io_module",title:"io",sidebar_label:"io",slug:"/modules/io_module"},i={unversionedId:"io_module",id:"io_module",isDocsHomePage:!1,title:"io",description:"This module is dedicated to input/output operations.",source:"@site/docs/io_module.md",slug:"/modules/io_module",permalink:"/melon/docs/modules/io_module",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/io_module.md",version:"current",sidebar_label:"io",sidebar:"someSidebar",previous:{title:"integer",permalink:"/melon/docs/modules/integer_module"},next:{title:"json",permalink:"/melon/docs/modules/json_module"}},c=[{value:"Functions",id:"functions",children:[{value:"print(...)",id:"print",children:[]},{value:"open(path, flags)",id:"openpath-flags",children:[]},{value:"close(file)",id:"closefile",children:[]},{value:"read(file, bytes)",id:"readfile-bytes",children:[]},{value:"write(file, data)",id:"writefile-data",children:[]},{value:"flush(file)",id:"flushfile",children:[]},{value:"tell(file)",id:"tellfile",children:[]},{value:"seek(file, offset, fromEnd)",id:"seekfile-offset-fromend",children:[]},{value:"size(file)",id:"sizefile",children:[]},{value:"isEOF(file)",id:"iseoffile",children:[]}]},{value:"Properties",id:"properties",children:[{value:"stdin",id:"stdin",children:[]},{value:"stdout",id:"stdout",children:[]},{value:"stderr",id:"stderr",children:[]}]}],o={rightToc:c};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"This module is dedicated to input/output operations."),Object(b.b)("h2",{id:"functions"},"Functions"),Object(b.b)("h3",{id:"print"},"print(...)"),Object(b.b)("p",null,"This function prints one or more values directly to ",Object(b.b)("inlineCode",{parentName:"p"},"stdout"),". Each value is first converted to a string and then output. A space is used as a separator between each value. "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"...")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A list of values to print")))),Object(b.b)("h3",{id:"openpath-flags"},"open(path, flags)"),Object(b.b)("p",null,"Opens a file and returns an object that can be used to do I/O on that file.   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"path")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The path to the file to open")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"flags")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The open flags, os/context dependent, such as ",Object(b.b)("inlineCode",{parentName:"td"},'"w"'),", ",Object(b.b)("inlineCode",{parentName:"td"},'"r"'),", ",Object(b.b)("inlineCode",{parentName:"td"},'"w+"'),", ...")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," A valid descriptor or null"),Object(b.b)("h3",{id:"closefile"},"close(file)"),Object(b.b)("p",null,"Closes a file that was previously open.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," on success, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h3",{id:"readfile-bytes"},"read(file, ","[bytes]",")"),Object(b.b)("p",null,"Reads data from a file.   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"bytes")," ","\xa0"," ",Object(b.b)("sub",null,Object(b.b)("sup",null,"Optional"))),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The maximum number of bytes to read")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," on success, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h3",{id:"writefile-data"},"write(file, data)"),Object(b.b)("p",null,"Writes data to a file descriptor.   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"data")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A string with the data to be written")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," on success, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h3",{id:"flushfile"},"flush(file)"),Object(b.b)("p",null,"Flushes the buffer for a file, writing any pending changes immediately.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," on success, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h3",{id:"tellfile"},"tell(file)"),Object(b.b)("p",null,"Gets the current position inside a file  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The number of bytes into the file"),Object(b.b)("h3",{id:"seekfile-offset-fromend"},"seek(file, offset, ","[fromEnd]",")"),Object(b.b)("p",null,"Seeks the current position inside the file to a given value    "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"offset")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An integer with the new offset in bytes")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"fromEnd")," ","\xa0"," ",Object(b.b)("sub",null,Object(b.b)("sup",null,"Optional"))),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"If ",Object(b.b)("inlineCode",{parentName:"td"},"true")," sets the new position counting from the end of the file")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," on success, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h3",{id:"sizefile"},"size(file)"),Object(b.b)("p",null,"Returns the size of a given open file descriptor.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The number of total bytes for the file"),Object(b.b)("h3",{id:"iseoffile"},"isEOF(file)"),Object(b.b)("p",null,"Checks if the end of file has been reached for a file descriptor.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"file")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A file descriptor returned by ",Object(b.b)("inlineCode",{parentName:"td"},"open"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if the EOF has been reached, ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise"),Object(b.b)("h2",{id:"properties"},"Properties"),Object(b.b)("h3",{id:"stdin"},"stdin"),Object(b.b)("p",null,"The standard input file"),Object(b.b)("h3",{id:"stdout"},"stdout"),Object(b.b)("p",null,"The standard output file"),Object(b.b)("h3",{id:"stderr"},"stderr"),Object(b.b)("p",null,"The standard error file"))}p.isMDXComponent=!0}}]);