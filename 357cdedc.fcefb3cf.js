(window.webpackJsonp=window.webpackJsonp||[]).push([[11],{100:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var p=r.a.createContext({}),o=function(e){var t=r.a.useContext(p),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},O=function(e){var t=o(e.components);return r.a.createElement(p.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),O=o(a),u=n,m=O["".concat(l,".").concat(u)]||O[u]||j[u]||b;return a?r.a.createElement(m,c(c({ref:t},p),{},{components:a})):r.a.createElement(m,c({ref:t},p))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=u;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var p=2;p<b;p++)l[p]=a[p];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}u.displayName="MDXCreateElement"},67:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return i})),a.d(t,"default",(function(){return o}));var n=a(2),r=a(6),b=(a(0),a(100)),l={id:"types_module",title:"types",sidebar_label:"types",slug:"/modules/types_module"},c={unversionedId:"types_module",id:"types_module",isDocsHomePage:!1,title:"types",description:"This module provides functions to extract type-related information",source:"@site/docs/types_module.md",slug:"/modules/types_module",permalink:"/melon/docs/modules/types_module",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/types_module.md",version:"current",sidebar_label:"types",sidebar:"someSidebar",previous:{title:"system",permalink:"/melon/docs/modules/system_module"}},i=[{value:"Functions",id:"functions",children:[{value:"of(val)",id:"ofval",children:[]},{value:"isInteger(val)",id:"isintegerval",children:[]},{value:"isNumber(val)",id:"isnumberval",children:[]},{value:"isBool(val)",id:"isboolval",children:[]},{value:"isNull(val)",id:"isnullval",children:[]},{value:"isString(val)",id:"isstringval",children:[]},{value:"isObject(val)",id:"isobjectval",children:[]},{value:"isClosure(val)",id:"isclosureval",children:[]},{value:"isProgram(val)",id:"isprogramval",children:[]},{value:"isArray(val)",id:"isarrayval",children:[]}]}],p={rightToc:i};function o(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},p,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"This module provides functions to extract type-related information\nfrom values."),Object(b.b)("h2",{id:"functions"},"Functions"),Object(b.b)("h3",{id:"ofval"},"of(val)"),Object(b.b)("p",null," Returns a string representation of the type of a value.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to inspect")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," A string representation of the type of the value"),Object(b.b)("h3",{id:"isintegerval"},"isInteger(val)"),Object(b.b)("p",null," Checks whether a given value is an ",Object(b.b)("inlineCode",{parentName:"p"},"Integer"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is an ",Object(b.b)("inlineCode",{parentName:"p"},"Integer"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isnumberval"},"isNumber(val)"),Object(b.b)("p",null," Checks whether a given value is a ",Object(b.b)("inlineCode",{parentName:"p"},"Number"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is a ",Object(b.b)("inlineCode",{parentName:"p"},"Number"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isboolval"},"isBool(val)"),Object(b.b)("p",null," Checks whether a given value is a ",Object(b.b)("inlineCode",{parentName:"p"},"Bool"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is a ",Object(b.b)("inlineCode",{parentName:"p"},"Bool"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isnullval"},"isNull(val)"),Object(b.b)("p",null," Checks whether a given value is ",Object(b.b)("inlineCode",{parentName:"p"},"null"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is ",Object(b.b)("inlineCode",{parentName:"p"},"null"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isstringval"},"isString(val)"),Object(b.b)("p",null," Checks whether a given value is a ",Object(b.b)("inlineCode",{parentName:"p"},"String"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is a ",Object(b.b)("inlineCode",{parentName:"p"},"String"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isobjectval"},"isObject(val)"),Object(b.b)("p",null," Checks whether a given value is an ",Object(b.b)("inlineCode",{parentName:"p"},"Object"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is an ",Object(b.b)("inlineCode",{parentName:"p"},"Object"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isclosureval"},"isClosure(val)"),Object(b.b)("p",null," Checks whether a given value is a ",Object(b.b)("inlineCode",{parentName:"p"},"Function"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is a ",Object(b.b)("inlineCode",{parentName:"p"},"Function"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isprogramval"},"isProgram(val)"),Object(b.b)("p",null," Checks whether a given value is a ",Object(b.b)("inlineCode",{parentName:"p"},"Program"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is a ",Object(b.b)("inlineCode",{parentName:"p"},"Program"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."),Object(b.b)("h3",{id:"isarrayval"},"isArray(val)"),Object(b.b)("p",null," Checks whether a given value is an ",Object(b.b)("inlineCode",{parentName:"p"},"Array"),".  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"The value to check")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," ",Object(b.b)("inlineCode",{parentName:"p"},"true")," if ",Object(b.b)("inlineCode",{parentName:"p"},"val")," is an ",Object(b.b)("inlineCode",{parentName:"p"},"Array"),", ",Object(b.b)("inlineCode",{parentName:"p"},"false")," otherwise."))}o.isMDXComponent=!0}}]);