(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),a=n.n(r);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function l(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var p=a.a.createContext({}),s=function(e){var t=a.a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):l(l({},t),e)),n},b=function(e){var t=s(e.components);return a.a.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.a.createElement(a.a.Fragment,{},t)}},m=a.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),b=s(n),m=r,d=b["".concat(i,".").concat(m)]||b[m]||u[m]||o;return n?a.a.createElement(d,l(l({ref:t},p),{},{components:n})):a.a.createElement(d,l({ref:t},p))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=m;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var p=2;p<o;p++)i[p]=n[p];return a.a.createElement.apply(null,i)}return a.a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},76:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return l})),n.d(t,"rightToc",(function(){return c})),n.d(t,"default",(function(){return s}));var r=n(2),a=n(6),o=(n(0),n(100)),i={id:"control-structures",title:"Control structures",sidebar_label:"Control structures",slug:"/control-structures"},l={unversionedId:"control-structures",id:"control-structures",isDocsHomePage:!1,title:"Control structures",description:"If conditional",source:"@site/docs/control_structures.md",slug:"/control-structures",permalink:"/melon/docs/control-structures",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/control_structures.md",version:"current",sidebar_label:"Control structures",sidebar:"someSidebar",previous:{title:"Null",permalink:"/melon/docs/types/null"},next:{title:"Operators",permalink:"/melon/docs/operators"}},c=[{value:"If conditional",id:"if-conditional",children:[]},{value:"While loop",id:"while-loop",children:[]},{value:"For-in loops",id:"for-in-loops",children:[]}],p={rightToc:c};function s(e){var t=e.components,n=Object(a.a)(e,["components"]);return Object(o.b)("wrapper",Object(r.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)("h2",{id:"if-conditional"},"If conditional"),Object(o.b)("p",null,"In melon the ",Object(o.b)("inlineCode",{parentName:"p"},"if")," statement is similar to most imperative programming languages,\nits syntax is:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"if (expression) <statement>\n")),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"statement")," is usually a block or a function call/assignment statement:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'if (1 < 2) {\n    // do stuff\n    io.print("Ok");\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'if (1 < 2) io.print("Ok");\n')),Object(o.b)("p",null,Object(o.b)("inlineCode",{parentName:"p"},"else/else if")," also work as usual:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'if (a < 2) {\n    io.print("Ok");\n} else if (a < 5) {\n    io.print("Maybe Ok");\n} else {\n    io.print("Not Ok");\n}\n')),Object(o.b)("h2",{id:"while-loop"},"While loop"),Object(o.b)("p",null,"While loops execute a statement while an expression is ",Object(o.b)("inlineCode",{parentName:"p"},"true"),", in melon they follow the syntax convention of most imperative languages:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"while(someExpression) <statement>\n")),Object(o.b)("p",null,"As in the ",Object(o.b)("inlineCode",{parentName:"p"},"if")," conditional, the ",Object(o.b)("inlineCode",{parentName:"p"},"statement")," is usually a block or a function call/assignment statement:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'while (someExpression) {\n    // do stuff\n    io.print("Ok");\n}\n')),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'while (someExpression) io.print("Ok");\n')),Object(o.b)("h2",{id:"for-in-loops"},"For-in loops"),Object(o.b)("p",null,"The ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop in melon is bit different from the one in most imperative languages and it's more like a ",Object(o.b)("inlineCode",{parentName:"p"},"for-each")," loop. The ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop in melon iterates over a an ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/iterator"}),Object(o.b)("inlineCode",{parentName:"a"},"Iterator"))," value, assigning each element to a variable in succession."),Object(o.b)("p",null,"For example you can use a ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop to iterate over ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/range"}),Object(o.b)("inlineCode",{parentName:"a"},"Range"))," values:"),Object(o.b)("pre",null,Object(o.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),"for (let i in 0..10) {\n    io.print(i);\n}\n")),Object(o.b)("p",null,"The code above will print numbers from 0 to 9, the ",Object(o.b)("inlineCode",{parentName:"p"},"for")," loop will get the iterator from the ",Object(o.b)("inlineCode",{parentName:"p"},"0..10")," range value and put the next value in the ",Object(o.b)("inlineCode",{parentName:"p"},"i")," variable. On the next step of the loop, ",Object(o.b)("inlineCode",{parentName:"p"},"i")," will contain the next value in the iterator, ",Object(o.b)("inlineCode",{parentName:"p"},"i")," will change on every iteration until the iterator returns a value with its ",Object(o.b)("inlineCode",{parentName:"p"},"done")," property set to ",Object(o.b)("inlineCode",{parentName:"p"},"true"),". See ",Object(o.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/iterator"}),Object(o.b)("inlineCode",{parentName:"a"},"Iterator"))," for an in-depth explanation."))}s.isMDXComponent=!0}}]);