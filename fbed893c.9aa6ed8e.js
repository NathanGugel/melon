(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return b})),n.d(t,"b",(function(){return d}));var r=n(0),i=n.n(r);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function c(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?c(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):c(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,i=function(e,t){if(null==e)return{};var n,r,i={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=i.a.createContext({}),p=function(e){var t=i.a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},b=function(e){var t=p(e.components);return i.a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return i.a.createElement(i.a.Fragment,{},t)}},g=i.a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,a=e.originalType,c=e.parentName,l=s(e,["components","mdxType","originalType","parentName"]),b=p(n),g=r,d=b["".concat(c,".").concat(g)]||b[g]||u[g]||a;return n?i.a.createElement(d,o(o({ref:t},l),{},{components:n})):i.a.createElement(d,o({ref:t},l))}));function d(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var a=n.length,c=new Array(a);c[0]=g;var o={};for(var s in t)hasOwnProperty.call(t,s)&&(o[s]=t[s]);o.originalType=e,o.mdxType="string"==typeof e?e:r,c[1]=o;for(var l=2;l<a;l++)c[l]=n[l];return i.a.createElement.apply(null,c)}return i.a.createElement.apply(null,n)}g.displayName="MDXCreateElement"},96:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return c})),n.d(t,"metadata",(function(){return o})),n.d(t,"rightToc",(function(){return s})),n.d(t,"default",(function(){return p}));var r=n(2),i=n(6),a=(n(0),n(100)),c={id:"string",title:"String",sidebar_label:"String",slug:"/types/string"},o={unversionedId:"string",id:"string",isDocsHomePage:!1,title:"String",description:"A String value represents a sequence of characters.",source:"@site/docs/string.md",slug:"/types/string",permalink:"/melon/docs/types/string",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/string.md",version:"current",sidebar_label:"String",sidebar:"someSidebar",previous:{title:"Boolean",permalink:"/melon/docs/types/bool"},next:{title:"Array",permalink:"/melon/docs/types/array"}},s=[{value:"Creating strings",id:"creating-strings",children:[]},{value:"String length",id:"string-length",children:[]},{value:"Strings concatenation",id:"strings-concatenation",children:[]},{value:"Accessing individual characters",id:"accessing-individual-characters",children:[]},{value:"Accessing with ranges",id:"accessing-with-ranges",children:[]},{value:"String manipulation",id:"string-manipulation",children:[]},{value:"VM Internals",id:"vm-internals",children:[{value:"Internalization",id:"internalization",children:[]},{value:"Wide-string support",id:"wide-string-support",children:[]}]}],l={rightToc:s};function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)("wrapper",Object(r.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"String")," value represents a sequence of characters."),Object(a.b)("h2",{id:"creating-strings"},"Creating strings"),Object(a.b)("p",null,"A string can be created by wrapping the characters in double quotes:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myStringVar = "Hello, world!";\n')),Object(a.b)("p",null,"Strings are immutable, this means that whenever you want to modify a string you'll get a new one and the original one will remain unchanged."),Object(a.b)("h2",{id:"string-length"},"String length"),Object(a.b)("p",null,"You can use the size operator ",Object(a.b)("inlineCode",{parentName:"p"},"#")," to retrive the size of a ",Object(a.b)("inlineCode",{parentName:"p"},"String"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myString = "12345";\nio.print(#myString); // 5\nio.print(#"") // 0\n')),Object(a.b)("h2",{id:"strings-concatenation"},"Strings concatenation"),Object(a.b)("p",null,"A ",Object(a.b)("inlineCode",{parentName:"p"},"String")," can be created by concatenating two other ",Object(a.b)("inlineCode",{parentName:"p"},"String")," values by using the concatenation operator ",Object(a.b)("inlineCode",{parentName:"p"},".."),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let stringA = "Hello, ";\nlet stringB = "world!";\nlet stringC = stringA .. stringB;\n\nio.print(stringC); // Hello, world!\nio.print(stringA .. stringA .. stringC); // Hello, Hello, Hello, world!\n')),Object(a.b)("h2",{id:"accessing-individual-characters"},"Accessing individual characters"),Object(a.b)("p",null,"The indexing operator can be used to read individual characters in a ",Object(a.b)("inlineCode",{parentName:"p"},"String"),":"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let stringA = "Hello";\n\nio.print(stringA[0]); // H\nio.print(stringA[1]); // e\nio.print(stringA[2]); // l\nio.print(stringA[3]); // l\n')),Object(a.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-heading"}),Object(a.b)("h5",{parentName:"div"},Object(a.b)("span",Object(r.a)({parentName:"h5"},{className:"admonition-icon"}),Object(a.b)("svg",Object(r.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(a.b)("path",Object(r.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(a.b)("div",Object(r.a)({parentName:"div"},{className:"admonition-content"}),Object(a.b)("p",{parentName:"div"},"Given that strings are immutable, you can't change a character by using indexed assignment."))),Object(a.b)("h2",{id:"accessing-with-ranges"},"Accessing with ranges"),Object(a.b)("p",null,"You can use slicing to extract a portion of a string,\nmuch as you would with an ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/types/array"}),Object(a.b)("inlineCode",{parentName:"a"},"Array"))," value:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let stringA = "Hello";\n\nio.print(stringA[0:3] .. "!"); // Hell!\nio.print(stringA[:-1] .. "!"); // Hell!\nio.print(stringA[-2:]); // lo\n')),Object(a.b)("h2",{id:"string-manipulation"},"String manipulation"),Object(a.b)("p",null,"Most string manipulation functions can be found in the ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"/melon/docs/modules/string_module"}),Object(a.b)("inlineCode",{parentName:"a"},"string"))," core module."),Object(a.b)("h2",{id:"vm-internals"},"VM Internals"),Object(a.b)("h3",{id:"internalization"},"Internalization"),Object(a.b)("p",null,"Strings are ",Object(a.b)("a",Object(r.a)({parentName:"p"},{href:"https://en.wikipedia.org/wiki/String_interning"}),"internalized"),". This means that up to a certain length, if the value is the same, the same exact string in memory will be used for each content. This makes comparing small strings very fast:"),Object(a.b)("pre",null,Object(a.b)("code",Object(r.a)({parentName:"pre"},{className:"language-js"}),'let myShortString = "short";\n\n// This is fast!\nif (myShortString == "short") {\n}\n')),Object(a.b)("p",null,"In the example above the VM will simply compare the memory location of the two strings, a simple integer comparison, knowing that the string ",Object(a.b)("inlineCode",{parentName:"p"},'"short"')," is internalized. If the strings are the same their location in memory must match."),Object(a.b)("h3",{id:"wide-string-support"},"Wide-string support"),Object(a.b)("p",null,"Currently wide strings are not supported. This means that while you can output multi-byte encoded character (such as emojis), Melon will see the multi-byte components as distinct characters.\nWhile this may not be a big issue in some cases, it's something to be aware of when doing string manipulation as it may break the string (eg: a multi-byte sequence is interrupted)."),Object(a.b)("p",null,"This is also why if you use the size operator ",Object(a.b)("inlineCode",{parentName:"p"},"#")," on a multi-byte char it will not return ",Object(a.b)("inlineCode",{parentName:"p"},"1"),"."))}p.isMDXComponent=!0}}]);