(window.webpackJsonp=window.webpackJsonp||[]).push([[17],{100:function(e,t,n){"use strict";n.d(t,"a",(function(){return d})),n.d(t,"b",(function(){return j}));var a=n(0),r=n.n(a);function b(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function c(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){b(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},b=Object.keys(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(a=0;a<b.length;a++)n=b[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=r.a.createContext({}),p=function(e){var t=r.a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):c(c({},t),e)),n},d=function(e){var t=p(e.components);return r.a.createElement(o.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},O=r.a.forwardRef((function(e,t){var n=e.components,a=e.mdxType,b=e.originalType,l=e.parentName,o=i(e,["components","mdxType","originalType","parentName"]),d=p(n),O=a,j=d["".concat(l,".").concat(O)]||d[O]||s[O]||b;return n?r.a.createElement(j,c(c({ref:t},o),{},{components:n})):r.a.createElement(j,c({ref:t},o))}));function j(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var b=n.length,l=new Array(b);l[0]=O;var c={};for(var i in t)hasOwnProperty.call(t,i)&&(c[i]=t[i]);c.originalType=e,c.mdxType="string"==typeof e?e:a,l[1]=c;for(var o=2;o<b;o++)l[o]=n[o];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,n)}O.displayName="MDXCreateElement"},73:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return l})),n.d(t,"metadata",(function(){return c})),n.d(t,"rightToc",(function(){return i})),n.d(t,"default",(function(){return p}));var a=n(2),r=n(6),b=(n(0),n(100)),l={id:"string_module",title:"string",sidebar_label:"string",slug:"/modules/string_module"},c={unversionedId:"string_module",id:"string_module",isDocsHomePage:!1,title:"string",description:"This module provides functions for basic string manipulation.",source:"@site/docs/string_module.md",slug:"/modules/string_module",permalink:"/melon/docs/modules/string_module",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/string_module.md",version:"current",sidebar_label:"string",sidebar:"someSidebar",previous:{title:"random",permalink:"/melon/docs/modules/random_module"},next:{title:"system",permalink:"/melon/docs/modules/system_module"}},i=[{value:"Functions",id:"functions",children:[{value:"toString(val)",id:"tostringval",children:[]},{value:"charCodeAt(str, idx)",id:"charcodeatstr-idx",children:[]},{value:"fromCharCodes(codes)",id:"fromcharcodescodes",children:[]},{value:"replace(haystack, needle, replacement, start, end)",id:"replacehaystack-needle-replacement-start-end",children:[]},{value:"find(haystack, needle, start)",id:"findhaystack-needle-start",children:[]},{value:"toLower(str)",id:"tolowerstr",children:[]},{value:"toUpper(str)",id:"toupperstr",children:[]},{value:"toCapitalized(str)",id:"tocapitalizedstr",children:[]},{value:"trim(str)",id:"trimstr",children:[]},{value:"format(fmt, args)",id:"formatfmt-args",children:[]},{value:"split(str, token)",id:"splitstr-token",children:[]}]}],o={rightToc:i};function p(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(a.a)({},o,n,{components:t,mdxType:"MDXLayout"}),Object(b.b)("p",null,"This module provides functions for basic string manipulation."),Object(b.b)("h2",{id:"functions"},"Functions"),Object(b.b)("h3",{id:"tostringval"},"toString(val)"),Object(b.b)("p",null,"Converts the provided value to its ",Object(b.b)("inlineCode",{parentName:"p"},"String")," representation.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"val")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The value to convert to string")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The string representation of ",Object(b.b)("inlineCode",{parentName:"p"},"val")),Object(b.b)("h3",{id:"charcodeatstr-idx"},"charCodeAt(str, idx)"),Object(b.b)("p",null,"Returns an ",Object(b.b)("inlineCode",{parentName:"p"},"Integer")," representing the ASCII code of the character at index ",Object(b.b)("inlineCode",{parentName:"p"},"idx")," in ",Object(b.b)("inlineCode",{parentName:"p"},"str"),".   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The subject string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"idx")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The character's index")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," An ",Object(b.b)("inlineCode",{parentName:"p"},"Integer")," or ",Object(b.b)("inlineCode",{parentName:"p"},"null")," if the index is out of range"),Object(b.b)("h3",{id:"fromcharcodescodes"},"fromCharCodes(codes)"),Object(b.b)("p",null,"Creates a string from a list of ASCII codes.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"codes")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"A single ",Object(b.b)("inlineCode",{parentName:"td"},"Integer")," or an ",Object(b.b)("inlineCode",{parentName:"td"},"Array")," of ",Object(b.b)("inlineCode",{parentName:"td"},"Integer")," values. Any non-",Object(b.b)("inlineCode",{parentName:"td"},"Integer")," entry will be skipped.")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," A new string made up of the provided sequence of ASCII codes"),Object(b.b)("h3",{id:"replacehaystack-needle-replacement-start-end"},"replace(haystack, needle, replacement, ","[start]",", ","[end]",")"),Object(b.b)("p",null,"Replaces with ",Object(b.b)("inlineCode",{parentName:"p"},"replacement")," any occurrence of ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," found inside ",Object(b.b)("inlineCode",{parentName:"p"},"haystack")," between the ",Object(b.b)("inlineCode",{parentName:"p"},"start")," (inclusive) and ",Object(b.b)("inlineCode",{parentName:"p"},"end")," (exclusive) indices.      "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"haystack")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string in which to find the ",Object(b.b)("inlineCode",{parentName:"td"},"needle"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"needle")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The substring to be replaced by ",Object(b.b)("inlineCode",{parentName:"td"},"replacement"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"replacement")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to replace any occurrence of ",Object(b.b)("inlineCode",{parentName:"td"},"needle"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"start")," ","\xa0"," ",Object(b.b)("sub",null,Object(b.b)("sup",null,"Optional"))),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The index of ",Object(b.b)("inlineCode",{parentName:"td"},"haystack")," at which the search should start, defaults to 0")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"end")," ","\xa0"," ",Object(b.b)("sub",null,Object(b.b)("sup",null,"Optional"))),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The index of ",Object(b.b)("inlineCode",{parentName:"td"},"haystack")," at which the search should end, defaults to the length of ",Object(b.b)("inlineCode",{parentName:"td"},"haystack"))))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," A new string with ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," replaced by ",Object(b.b)("inlineCode",{parentName:"p"},"replacement")," or the original ",Object(b.b)("inlineCode",{parentName:"p"},"haystack")," if ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," was not found."),Object(b.b)("h3",{id:"findhaystack-needle-start"},"find(haystack, needle, ","[start]",")"),Object(b.b)("p",null,"Looks for any occurrence of ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," in ",Object(b.b)("inlineCode",{parentName:"p"},"haystack")," starting from the ",Object(b.b)("inlineCode",{parentName:"p"},"start")," index.    "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"haystack")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string in which to find the ",Object(b.b)("inlineCode",{parentName:"td"},"needle"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"needle")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The substring to search for")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"start")," ","\xa0"," ",Object(b.b)("sub",null,Object(b.b)("sup",null,"Optional"))),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The index at which the search should start, defaults to 0")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," An ",Object(b.b)("inlineCode",{parentName:"p"},"Integer")," with the index in ",Object(b.b)("inlineCode",{parentName:"p"},"haystack")," at which the first character of ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," was found. ",Object(b.b)("inlineCode",{parentName:"p"},"null")," if ",Object(b.b)("inlineCode",{parentName:"p"},"needle")," couldn","'","t be found."),Object(b.b)("h3",{id:"tolowerstr"},"toLower(str)"),Object(b.b)("p",null,"Transforms the provided string to lowercase.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to transform")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The transformed string"),Object(b.b)("h3",{id:"toupperstr"},"toUpper(str)"),Object(b.b)("p",null,"Transforms the provided string to uppercase.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to transform")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The transformed string"),Object(b.b)("h3",{id:"tocapitalizedstr"},"toCapitalized(str)"),Object(b.b)("p",null,"Capitalizes the provided string, only the first character is transformed to uppercase.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to transform")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The transformed string"),Object(b.b)("h3",{id:"trimstr"},"trim(str)"),Object(b.b)("p",null,"Trims a string removing any space character from the beginning and end of a string.  "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to be trimmed")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The trimmed string"),Object(b.b)("h3",{id:"formatfmt-args"},"format(fmt, args)"),Object(b.b)("p",null,"Formats a string with ",Object(b.b)("a",Object(a.a)({parentName:"p"},{href:"http://www.cplusplus.com/reference/cstdio/printf/"}),"printf")," style formatting.   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"fmt")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The format to be used when formatting the string")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"args")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"An array of the values required by the ",Object(b.b)("inlineCode",{parentName:"td"},"fmt")," string, it may be an empty array")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," The values provided in ",Object(b.b)("inlineCode",{parentName:"p"},"args")," formatted using ",Object(b.b)("inlineCode",{parentName:"p"},"fmt")),Object(b.b)("h3",{id:"splitstr-token"},"split(str, token)"),Object(b.b)("p",null,"Splits ",Object(b.b)("inlineCode",{parentName:"p"},"str")," using ",Object(b.b)("inlineCode",{parentName:"p"},"token")," as a delimiter.   "),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Argument"),Object(b.b)("th",Object(a.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"str")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The string to be splitted")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),Object(b.b)("strong",{parentName:"td"},"token")),Object(b.b)("td",Object(a.a)({parentName:"tr"},{align:null}),"The substring to use as delimiter")))),Object(b.b)("p",null,Object(b.b)("strong",{parentName:"p"},"Returns:")," An array with the strings resulted from splitting ",Object(b.b)("inlineCode",{parentName:"p"},"str")," by ",Object(b.b)("inlineCode",{parentName:"p"},"token"),"."))}p.isMDXComponent=!0}}]);