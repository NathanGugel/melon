(window.webpackJsonp=window.webpackJsonp||[]).push([[36],{100:function(e,t,a){"use strict";a.d(t,"a",(function(){return O})),a.d(t,"b",(function(){return m}));var n=a(0),r=a.n(n);function b(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function l(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,n)}return a}function c(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?l(Object(a),!0).forEach((function(t){b(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):l(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function o(e,t){if(null==e)return{};var a,n,r=function(e,t){if(null==e)return{};var a,n,r={},b=Object.keys(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||(r[a]=e[a]);return r}(e,t);if(Object.getOwnPropertySymbols){var b=Object.getOwnPropertySymbols(e);for(n=0;n<b.length;n++)a=b[n],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var i=r.a.createContext({}),p=function(e){var t=r.a.useContext(i),a=t;return e&&(a="function"==typeof e?e(t):c(c({},t),e)),a},O=function(e){var t=p(e.components);return r.a.createElement(i.Provider,{value:t},e.children)},j={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},d=r.a.forwardRef((function(e,t){var a=e.components,n=e.mdxType,b=e.originalType,l=e.parentName,i=o(e,["components","mdxType","originalType","parentName"]),O=p(a),d=n,m=O["".concat(l,".").concat(d)]||O[d]||j[d]||b;return a?r.a.createElement(m,c(c({ref:t},i),{},{components:a})):r.a.createElement(m,c({ref:t},i))}));function m(e,t){var a=arguments,n=t&&t.mdxType;if("string"==typeof e||n){var b=a.length,l=new Array(b);l[0]=d;var c={};for(var o in t)hasOwnProperty.call(t,o)&&(c[o]=t[o]);c.originalType=e,c.mdxType="string"==typeof e?e:n,l[1]=c;for(var i=2;i<b;i++)l[i]=a[i];return r.a.createElement.apply(null,l)}return r.a.createElement.apply(null,a)}d.displayName="MDXCreateElement"},93:function(e,t,a){"use strict";a.r(t),a.d(t,"frontMatter",(function(){return l})),a.d(t,"metadata",(function(){return c})),a.d(t,"rightToc",(function(){return o})),a.d(t,"default",(function(){return p}));var n=a(2),r=a(6),b=(a(0),a(100)),l={id:"operators",title:"Operators",sidebar_label:"Operators",slug:"/operators"},c={unversionedId:"operators",id:"operators",isDocsHomePage:!1,title:"Operators",description:"Supported operators",source:"@site/docs/operators.md",slug:"/operators",permalink:"/melon/docs/operators",editUrl:"https://github.com/daniele-rapagnani/edit/master/docs/docs/operators.md",version:"current",sidebar_label:"Operators",sidebar:"someSidebar",previous:{title:"Control structures",permalink:"/melon/docs/control-structures"},next:{title:"Modules",permalink:"/melon/docs/modules"}},o=[{value:"Supported operators",id:"supported-operators",children:[{value:"Arithmetic operators",id:"arithmetic-operators",children:[]},{value:"Boolean operators",id:"boolean-operators",children:[]},{value:"Comparison operators",id:"comparison-operators",children:[]},{value:"Concatenation operator",id:"concatenation-operator",children:[]},{value:"Bless operator",id:"bless-operator",children:[]},{value:"Iterator operators",id:"iterator-operators",children:[]},{value:"Bitwise operators",id:"bitwise-operators",children:[]},{value:"Size operator",id:"size-operator",children:[]}]},{value:"Binary operators precedence",id:"binary-operators-precedence",children:[]},{value:"Operators overloading",id:"operators-overloading",children:[{value:"Custom operator&#39;s function",id:"custom-operators-function",children:[]},{value:"Supported custom operators",id:"supported-custom-operators",children:[]}]}],i={rightToc:o};function p(e){var t=e.components,a=Object(r.a)(e,["components"]);return Object(b.b)("wrapper",Object(n.a)({},i,a,{components:t,mdxType:"MDXLayout"}),Object(b.b)("h2",{id:"supported-operators"},"Supported operators"),Object(b.b)("h3",{id:"arithmetic-operators"},"Arithmetic operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"+")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Sum")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"-")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Subtraction")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"-")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Negation")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"/")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Division")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"*")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Multiplication")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"%")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Modulo")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"^")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Power")))),Object(b.b)("h3",{id:"boolean-operators"},"Boolean operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"&&")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Logic And")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("code",null,"|","|")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Logic Or")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"!")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Logic Not")))),Object(b.b)("h3",{id:"comparison-operators"},"Comparison operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"==")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Equality")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"!=")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Inequalit")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Greater")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">=")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Greater or equal")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Less")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<=")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Less or equal")))),Object(b.b)("h3",{id:"concatenation-operator"},"Concatenation operator"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"..")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Concatenation")))),Object(b.b)("p",null,"This operator is an alternative sum operator that can be used\nto join for example ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/string"}),Object(b.b)("inlineCode",{parentName:"a"},"String"))," or ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/array"}),Object(b.b)("inlineCode",{parentName:"a"},"Array"))," values."),Object(b.b)("h3",{id:"bless-operator"},"Bless operator"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"@")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Change prototype")))),Object(b.b)("p",null,"This operator can be used to change the prototype of an\n",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/object#prototype"}),Object(b.b)("inlineCode",{parentName:"a"},"Object")),"."),Object(b.b)("h3",{id:"iterator-operators"},"Iterator operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get value's iterator")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"*")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Advance iterator")))),Object(b.b)("h3",{id:"bitwise-operators"},"Bitwise operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"&")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"And")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("code",null,"|")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Or")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">>")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Right shift")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"<<")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Left shift")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"^^")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Binary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Xor")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"^")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Not")))),Object(b.b)("h3",{id:"size-operator"},"Size operator"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Type"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Description"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"#")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Get the the size of a value")))),Object(b.b)("p",null,"This operator can be used to retrieve the size of some value,\nsee for example ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/string#string-length"}),Object(b.b)("inlineCode",{parentName:"a"},"String"))," or ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/array#reading-size"}),Object(b.b)("inlineCode",{parentName:"a"},"Array")),"."),Object(b.b)("h2",{id:"binary-operators-precedence"},"Binary operators precedence"),Object(b.b)("p",null,"Operators with higher precedence are processed as operands of operators with lower precedence.\nLower numbers mean higher precedence."),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Precedence"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operators"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"1"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"2"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"%")," ",Object(b.b)("inlineCode",{parentName:"td"},"/")," ",Object(b.b)("inlineCode",{parentName:"td"},"*"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"3"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"+")," ",Object(b.b)("inlineCode",{parentName:"td"},"-")," ",Object(b.b)("inlineCode",{parentName:"td"},"^^"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"4"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">>")," ",Object(b.b)("inlineCode",{parentName:"td"},"<<"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"5"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},">")," ",Object(b.b)("inlineCode",{parentName:"td"},"<")," ",Object(b.b)("inlineCode",{parentName:"td"},">=")," ",Object(b.b)("inlineCode",{parentName:"td"},"<=")," ",Object(b.b)("inlineCode",{parentName:"td"},"@"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"6"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"==")," ",Object(b.b)("inlineCode",{parentName:"td"},"!=")," ",Object(b.b)("inlineCode",{parentName:"td"},".."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"7"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"&"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"8"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"^"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"9"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("code",null,"|"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"10"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"&&"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"11"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"|","|")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"12"),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"??"))))),Object(b.b)("p",null,"As an example:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"5 * 4 + 3 >> 2 & 3\n")),Object(b.b)("p",null,"Would be processed as:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"(((5 * 4) + 3) >> 2) & 3\n")),Object(b.b)("h2",{id:"operators-overloading"},"Operators overloading"),Object(b.b)("p",null,"Melon supports operator overloading, this means that you can add your custom logic to be executed when an operator is used on ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/object"}),Object(b.b)("inlineCode",{parentName:"a"},"Object"))," operands."),Object(b.b)("p",null,"To overload an operator, ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/object#symbol-keys"}),Object(b.b)("inlineCode",{parentName:"a"},"Symbol")," keys")," are used. Each operator has its own key which is stored inside the ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/modules/object_module"}),Object(b.b)("inlineCode",{parentName:"a"},"object"))," core module."),Object(b.b)("p",null,"To perform the overload you can simply store a ",Object(b.b)("inlineCode",{parentName:"p"},"Function")," or ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/function#methods"}),Object(b.b)("inlineCode",{parentName:"a"},"method"))," with the custom operator's logic at its corresponding ",Object(b.b)("inlineCode",{parentName:"p"},"Symbol")," key:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),"let MyObj = {\n    create = => {\n        return {} @ MyObj;\n    },\n    [object.symbols.mulOperator] = |other| => {\n        return other * other;\n    }\n};\n\nlet a = MyObj.create();\n\nio.print(a * 5); // 25\n")),Object(b.b)("p",null,"As can been seen in the example above, you can combine ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/object#prototype"}),Object(b.b)("inlineCode",{parentName:"a"},"Object")," prototypes")," with operator overloading to overload one or more operators for all objects which extend a given prototype. This is somewhat akin to overloading operators for all instances of a class in traditional OOP."),Object(b.b)("h3",{id:"custom-operators-function"},"Custom operator's function"),Object(b.b)("p",null,"When writing a custom operator's function you should keep in mind which arguments you are going to get, as well as the value you are going to return."),Object(b.b)("p",null,"For unary operators there's only a single value, the operand.\nFor binary operators you are going to get two argument with both operands."),Object(b.b)("p",null,"The result of the operator applied on the operand(s) must be returned from your function.\nThis is true for most operators except for example the ",Object(b.b)("inlineCode",{parentName:"p"},"setPropertyOperator")," or the ",Object(b.b)("inlineCode",{parentName:"p"},"setIndexOperator"),"."),Object(b.b)("p",null,"All custom operator's functions can return the value ",Object(b.b)("inlineCode",{parentName:"p"},"false")," to abort the custom operator and simply try to fallback to the default behaviour."),Object(b.b)("p",null,"This is useful for example in conjunction with the ",Object(b.b)("inlineCode",{parentName:"p"},"*PropertyOperator")," or ",Object(b.b)("inlineCode",{parentName:"p"},"*IndexOperator"),":"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let myCustomProp = {\n    [object.symbols.getPropertyOperator] = |prop| -> {\n        if (prop == "test") {\n            return "dynamic value";\n        }\n        return false;\n    },\n    [object.symbols.setPropertyOperator] = |prop, val| -> {\n        io.print(prop);\n        io.print(val);\n        if (prop == "test2") {\n            return true;\n        }\n\n        return false;\n    }\n};\n')),Object(b.b)("p",null,"You can also overload the ",Object(b.b)("inlineCode",{parentName:"p"},"setPropertyOperator")," and ",Object(b.b)("inlineCode",{parentName:"p"},"setIndexOperator")," to create objects which can not be modified from the outside:"),Object(b.b)("pre",null,Object(b.b)("code",Object(n.a)({parentName:"pre"},{className:"language-js"}),'let readOnlyObj = {\n    test = "this is read only",\n    [object.symbols.setPropertyOperator] = -> {\n        return true;\n    }\n};\n')),Object(b.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-heading"}),Object(b.b)("h5",{parentName:"div"},Object(b.b)("span",Object(n.a)({parentName:"h5"},{className:"admonition-icon"}),Object(b.b)("svg",Object(n.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(b.b)("path",Object(n.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(b.b)("div",Object(n.a)({parentName:"div"},{className:"admonition-content"}),Object(b.b)("p",{parentName:"div"},"Considering the the first argument in all operators is the left hand side of a binary operand or the unary operand, you can use ",Object(b.b)("a",Object(n.a)({parentName:"p"},{href:"/melon/docs/types/function#methods"}),Object(b.b)("inlineCode",{parentName:"a"},"methods"))," to define a custom operator's behaviour and just use the ",Object(b.b)("inlineCode",{parentName:"p"},"this")," argument to refer to the first operand."))),Object(b.b)("h3",{id:"supported-custom-operators"},"Supported custom operators"),Object(b.b)("table",null,Object(b.b)("thead",{parentName:"table"},Object(b.b)("tr",{parentName:"thead"},Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Symbol"),Object(b.b)("th",Object(n.a)({parentName:"tr"},{align:null}),"Operator"))),Object(b.b)("tbody",{parentName:"table"},Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.sumOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"+"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.subOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"-"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.mulOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"*"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.divOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"/"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.concatOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},".."))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.compareOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"This can be used to implement ",Object(b.b)("inlineCode",{parentName:"td"},"=="),", ",Object(b.b)("inlineCode",{parentName:"td"},"<"),", ",Object(b.b)("inlineCode",{parentName:"td"},"<="),", ",Object(b.b)("inlineCode",{parentName:"td"},">")," and ",Object(b.b)("inlineCode",{parentName:"td"},">="),". The operator's ",Object(b.b)("inlineCode",{parentName:"td"},"Function")," should return an integer with the result of the ",Object(b.b)("inlineCode",{parentName:"td"},"left_hand_value - right_hand_value")," expression")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.getIndexOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"obj[i]")," where ",Object(b.b)("inlineCode",{parentName:"td"},"i")," is an integer")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.setIndexOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"obj[i] = <expr>")," where ",Object(b.b)("inlineCode",{parentName:"td"},"i")," is an integer")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.negOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary ",Object(b.b)("inlineCode",{parentName:"td"},"-"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.sizeOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"#"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.powOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"^"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.callOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"obj()"),", can be used to implement functors")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.hashingFunction")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Can be used to supply custom hashing for an object, to be used as key of another ",Object(b.b)("inlineCode",{parentName:"td"},"Object"),". The operator's ",Object(b.b)("inlineCode",{parentName:"td"},"Function")," should return an integer representing the hash.")),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.iterator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary ",Object(b.b)("inlineCode",{parentName:"td"},">"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.nextFunction")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),"Unary ",Object(b.b)("inlineCode",{parentName:"td"},"*"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.getPropertyOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"obj.k"))),Object(b.b)("tr",{parentName:"tbody"},Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"object.symbols.setPropertyOperator")),Object(b.b)("td",Object(n.a)({parentName:"tr"},{align:null}),Object(b.b)("inlineCode",{parentName:"td"},"obj.k"))))))}p.isMDXComponent=!0}}]);